language Lua
module Statements

start symbol AnyStat

test function call [[ fun() ]]
parse to FunctionCall(_, _)

test do end block [[ do end ]]
parse to Block(Chunk(_))

test while loop [[ while false do end ]]
parse to WhileLoop(False(), Chunk(_))

test repeat loop [[ repeat until true ]]
parse to RepeatLoop(Chunk(_), True())

test for loop [[ for x = 1, 10 do end ]]
parse to ForLoop(Name("x"), Number("1"), Number("10"), Chunk(_))

test for loop with step [[ for x = 1, 10, 2 do end ]]
parse to ForLoop(Name("x"), Number("1"), Number("10"), Number("2"), Chunk(_))

test for each loop [[ for x, y in pairs(table) do end ]]
parse to ForEachLoop(_, _, Chunk(_))

test function decl [[ function foo() end ]]
parse to FunctionDecl(
  FunctionName(["foo"]),
  Function(ParList([]), Chunk(_))
)

test function decl [[ function foo(x, y) end ]]
parse to FunctionDecl(
  FunctionName(["foo"]),
  Function(ParList([Name("x"), Name("y")]), Chunk(_))
)

test function decl, varargs [[ function bar(x, ...) end ]]
parse to FunctionDecl(
  FunctionName(["bar"]),
  Function(VarParList([Name("x")]), Chunk(_))
)

test local function decl [[ local function foo() end ]]
parse to LocalFunctionDecl("foo", Function(ParList([]), Chunk(_)))

test local function decl, varargs [[ local function bar(...) end ]]
parse to LocalFunctionDecl("bar", Function(VarParList([]), Chunk(_)))

test local var decl [[ local x, y, z ]]
parse to LocalVariableDecl([Name("x"), Name("y"), Name("z")])

test local var decl/empty [[ local ]]
parse fails

test local var decl with assignment [[ local x, y, z = 1, 2, 3 ]]
parse to LocalVariableDecl(
  [Name("x"), Name("y"), Name("z")],
  [Number("1"), Number("2"), Number("3")]
)

test if then [[ if true then end ]]
parse to IfThen(If(True, Chunk(_)), [], None)

test if then else [[ if true then else end ]]
parse to IfThen(_, [], Else(Chunk(_)))

test if then elseif end [[ if true then elseif false then end ]]
parse to IfThen(_, [ElseIf(False, Chunk(_))], None)

test if then elseif else end [[
  if true then elseif false then elseif false then else end
]]
parse to IfThen(_, [_,_], Else(_))

test break [[ repeat break until true ]]
parse to RepeatLoop(Chunk([], Break), True)

test return [[ do return end ]]
parse to Block(Chunk([], Return(None)))

test assignment/single [[ x = y ]]
parse to Assignment([Var("x")], [Var("y")])

test assignment/multi [[ x, y, z = 1, 2, 3 ]]
parse to Assignment(
  [Var("x"), Var("y"), Var("z")],
  [Number("1"), Number("2"), Number("3")]
)
