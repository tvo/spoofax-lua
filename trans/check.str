module check

imports
  libstratego-lib
  include/Lua
  lib/editor-common.generated
  desugar
  globals
  rename

rules

  // Analysis: does a topdown traversal of the tree,
  // and tries to apply the record-entity rule.
  analyze:
    t@(ast, path, project-path) -> t
    with
      !ast;
      desugar-top;
      rename-top;
      globals-top;
      rules(
        DecoratedAst := <id>
      )

  // Records the definition of an entity in a dynamic rule GetEntity.
  record-entity:
    Entity(x, body) -> Entity(x, body)
    with
      // For a name 'x', GetEntity will return the original 'x' tree node
      rules(
        GetEntity :+ x -> x
      )
rules

  constraint-error:
    Chunk(x) -> (break, $[Break must be the last statement in the block])
    where
      break := <fetch-elem(?Break())> x;
      last-stat := <last> x;
      not(<equal>(last-stat, break))

  constraint-error:
    Chunk(x) -> (return, $[Return must be the last statement in the block])
    where
      return := <fetch-elem(?Return(_))> x;
      last-stat := <last> x;
      not(<equal>(last-stat, return))

  // Reports an error if a property type is undefined.
  // This error is reported on the type name 'type'.
  constraint-error:
    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
    where
      not(!type => "String"); // String and Int are built-in types
      not(!type => "Int");
      not(<GetEntity> type) // no entity for this type
  
  // Reports an error if an entity is defined more than once.
  // This constraint is implemented by testing if the "bag" of
  // all entities x is not a singleton list.
  constraint-error:
    Entity(x, _) -> (x, $[Duplicate entity name])
    where
      not(<bagof-GetEntity> x => [_])
  
  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)
  
  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
