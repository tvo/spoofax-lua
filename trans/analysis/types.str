/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module types

imports
  include/Lua

// Signatures not generated from SDF because of the ast(...) construct.
signature
  constructors
    Minus : Exp -> Exp
    Minus : Exp * Exp -> Exp

// Signatures of types stored by the type analysis.
signature
  constructors
    Null     : Null
    Boolean  : Boolean
    Number   : Number
    String   : String
    Table    : Table
    Table    : List(String) -> Table    // for test integration
    Function : List(String) -> Function

strategies

/*
Goal of this type analysis is to calculate for each renamed variable the union
of all possible types a variable might have.

ObjectId maps a renamed name, a Field(oid, string) or an Index(oid, ?) to a set of object identifiers.
TypeOf maps an object identifier to the set of inferred types for this object identifier.

That is, ObjectId is used to infer which variables might point to the same objects, regardless of their type.
TypeOf is used to store what type each object might have.

TableField maps oid -> field names.
*/

  // integration with Types.spt
  test-type-analysis:
    (selected, _, _, _, _) -> result
    where
      !selected;
      try(?[<id>]);
      try(?Name(<id>));
      try(?Var(<id>));
      try(\Field(exp, name) -> Field(<get-oids; Hd> exp, name)\);
      try(\MethodCall(exp, name, _) -> Field(<get-oids; Hd> exp, name)\);
      try(\MethodName([table],field) -> Field(<ObjectId> table, field)\);
      get-types;
      map(try(
        \Function(name*) -> Function(<map(?Name(<strip-annos>))> name*)\
      )) => result

  type-analysis-top =
    with(
      rules(
        TypeOf :+ Null() -> Null()
        TypeOf :+ Boolean() -> Boolean()
        TypeOf :+ Number() -> Number()
        TypeOf :+ String() -> String()
      );
      assign-oid-top
      // ;debug-type-analysis
    )

  debug-type-analysis =
    <debug> "=== ObjectId ===";
    all-keys-ObjectId;
    list-loop(<debug(!"ObjectId: ")> (<id>, <bagof-ObjectId>));
    <debug> "=== TypeOf ===";
    all-keys-TypeOf;
    list-loop(<debug(!"TypeOf: ")> (<id>, <bagof-TypeOf>));
    <debug> "=== TableField ===";
    all-keys-TableField;
    list-loop(<debug(!"TableField: ")> (<id>, <bagof-TableField>));
    <debug> "=== END ==="

  is-empty = ?[]
  is-not-empty = ?[_|_]

rules // Helpers

  obtain-oids =
       bagof-ObjectId;
       is-not-empty
    <+
       ?t;
       oid := <new>;
       rules( ObjectId :+ t -> oid );
       ![oid]

  // Assign all OIDs in current term (list) to the key T.
  put-oids(|t) =
    where( present-oids := <bagof-ObjectId> t );
    list-loop({oid: ?oid;
      (  <one(?oid)> present-oids
      <+ rules( ObjectId :+ t -> oid )  )
    })

  put-type-of(|type) =
    where(
         bagof-TypeOf; one(?type)
      <+ ?oid; rules( TypeOf :+ oid -> type )
    )

  put-table-field(|name) =
    where(
         bagof-TableField; one(?name)
      <+ ?oid; rules( TableField :+ oid -> name )
    )

rules // Generic

  assign-oid-top = alltd(assign-oid)

  assign-oid: Var(name) -> <id>
    with
      <obtain-oids> name

  assign-oid: Field(exp-lhs, name) -> <id>
    where
      <is-string> name // Exclude COMPLETION(_) node
    with
      <assign-oid-top> exp-lhs;
      <get-oids> exp-lhs;
      list-loop(
        put-type-of(|Table());
        put-table-field(|name);
        <obtain-oids> Field(<id>, name)
      )

  assign-oid: Index(exp-lhs, exp-index) -> <id>
    with
      <assign-oid-top> exp-lhs;
      <assign-oid-top> exp-index;
      oids-index := <get-oids> exp-index;
      types-index := <mapconcat(bagof-TypeOf)> oids-index;
      <get-oids> exp-lhs;
      list-loop({oid-lhs:
        ?oid-lhs;
        put-type-of(|Table());
        <list-loop(<obtain-oids> Index(oid-lhs, <id>))> types-index
      })

rules // Method / function calls

  assign-oid: MethodCall(exp-lhs, name, arg*) -> <id>
    where
      <is-string> name // Exclude COMPLETION(_) node
    with
      <assign-oid-top> exp-lhs;
      method := <infer-method-type> arg*;
      <get-oids> exp-lhs;
      list-loop(
        put-type-of(|Table());
        put-table-field(|name);
        <obtain-oids> Field(<id>, name);
        list-loop(put-type-of(|method))
      )

  assign-oid: FunctionCall(Var(name), arg*) -> <id>
    with
      function := <infer-function-type> arg*;
      <obtain-oids> name;
      list-loop(put-type-of(|function))

  assign-oid: FunctionCall(Field(exp-lhs, name), arg*) -> <id>
    with
      <assign-oid-top> exp-lhs;
      function := <infer-function-type> arg*;
      <get-oids> exp-lhs;
      list-loop(
        put-type-of(|Table());
        put-table-field(|name);
        <obtain-oids> Field(<id>, name);
        list-loop(put-type-of(|function))
      )

  assign-oid: Function(par*, body){a} -> <id>
    with
      <assign-oid-top> body;
      <put-type-of(|Function(par*))> a

  infer-function-type =
    !Function(<infer-function-parameters>){"inferred"}

  infer-method-type =
    !Function([Name("self") | <infer-function-parameters>]){"inferred"}

  infer-function-parameters =
    // We name the arguments using letters a to z.
    length; range; map(!Name(<implode-string>[<addi>('a', <id>)]))

rules // Assignments

  assign-oid: LocalVariableDecl(name*, exp*) -> <id>
    with
      <assign-oid-top> exp*;
      <zipPad(assignment-assign-oid, !None())> (name*, exp*)

  assign-oid: Assignment(var*, exp*) -> <id>
    with
      // assign-oid-top for var* is called selectively in assignment-assign-oid
      <assign-oid-top> exp*;
      <zipPad(assignment-assign-oid, !None())> (var*, exp*)

  // Assignment to a new variable
  assignment-assign-oid:
    (Name(name), exp-rhs) -> <id>
    where
      <get-oids; put-oids(|name)> exp-rhs

  // Assignment to an existing variable
  assignment-assign-oid:
    (Var(name), exp-rhs) -> <id>
    where
      <get-oids; put-oids(|name)> exp-rhs

  // Assignment to a field, e.g. `x.y = 1'
  assignment-assign-oid:
    (Field(exp-lhs, name), exp-rhs) -> <id>
    where
      <assign-oid-top> exp-lhs;
      // Set all possible OIDs of the RHS to
      // the NAME field of all tables on the LHS.
      oids-rhs := <get-oids> exp-rhs;
      <get-oids> exp-lhs;
      list-loop({oid-lhs:
        ?oid-lhs;
        put-type-of(|Table());
        put-table-field(|name);
        <put-oids(|Field(oid-lhs, name))> oids-rhs
      })

  // Assignment to an index, e.g. `x[1] = 2'
  assignment-assign-oid:
    (Index(exp-lhs, exp-index), exp-rhs) -> <id>
    where
      <assign-oid-top> exp-lhs;
      <assign-oid-top> exp-index;
      oids-index := <get-oids> exp-index;
      types-index := <mapconcat(bagof-TypeOf)> oids-index;
      oids-rhs := <get-oids> exp-rhs;
      <get-oids> exp-lhs;
      list-loop({oid-lhs:
        ?oid-lhs;
        put-type-of(|Table());
        <list-loop({type-index:
          ?type-index;
          <put-oids(|Index(oid-lhs, type-index))> oids-rhs
        })> types-index
      })

  // Error case: more expressions than variables given in assignment.
  assignment-assign-oid:
    (None(), exp-rhs) -> <id>

rules // Table Constructors

  assign-oid: TableCons(field*){a} -> <id>
    with
      <put-type-of(|Table())> a;
      <list-loop(put-field(|a))> field*

  put-field(|tid): ArrayField(exp) -> <id>
    where
      <get-oids> exp;
      // When table TID is indexed using a number, it might return OIDs.
      // NOTE: all indices are in the same equivalence class (number).
      put-oids(|Index(tid, Number()))

  put-field(|tid): KeyValueField(name, exp) -> <id>
    where
      <get-oids> exp;
      // When table TID is indexed using a string, it might return OIDs.
      put-oids(|Index(tid, String()));
      // When field NAME in table TID is accessed, it might return OIDs.
      put-oids(|Field(tid, name));
      // Table TID has field NAME.
      <put-table-field(|name)> tid

  put-field(|tid): CalculatedField(_, _) -> <id>

rules // Getters

  // Error case: more variables than expressions given in assignment.
  get-oids: None() -> []

  get-oids: Null()    -> [Null()]
  get-oids: False()   -> [Boolean()]
  get-oids: True()    -> [Boolean()]
  get-oids: Number(_) -> [Number()]
  get-oids: String(_) -> [String()]

  // FIXME: Be smarter here...
  get-oids: VarArgs() -> []

  get-oids: Var(name) -> <bagof-ObjectId> name

  // Used for hover help; not used in the actual type analysis.
  get-oids: Name(name) -> <bagof-ObjectId> name

  // Binary operators with Number() result.
  // FIXME: ignoring operator overloading...
  get-oids: Plus  (_, _) -> [Number()]
  get-oids: Minus (_, _) -> [Number()]
  get-oids: Times (_, _) -> [Number()]
  get-oids: Divide(_, _) -> [Number()]
  get-oids: Power (_, _) -> [Number()]
  get-oids: Modulo(_, _) -> [Number()]

  // Binary operators with String() result.
  get-oids: Concat(_, _) -> [String()]

  // Binary operators with Boolean() result.
  get-oids: LowerThan  (_, _) -> [Boolean()]
  get-oids: GreaterThan(_, _) -> [Boolean()]
  get-oids: LowerThanOrEqual  (_, _) -> [Boolean()]
  get-oids: GreaterThanOrEqual(_, _) -> [Boolean()]
  get-oids: Equal   (_, _) -> [Boolean()]
  get-oids: NotEqual(_, _) -> [Boolean()]

  // And and Or return one of their arguments.
  get-oids: And(x, y) -> <conc> (<get-oids> x, <get-oids> y)
  get-oids: Or (x, y) -> <conc> (<get-oids> x, <get-oids> y)

  // Unary operators.
  get-oids: Minus(_) -> [Number()]
  get-oids: Not(_) -> [Boolean()]
  get-oids: Length(_) -> [Number()]

  get-oids: Field(exp, name) -> oids
    where
      <get-oids> exp;
      mapconcat(<bagof-ObjectId> Field(<id>, name)) => oids

  get-oids: Index(exp, exp-index) -> oids
    where
      oids-index := <get-oids> exp-index;
      types-index := <mapconcat(bagof-TypeOf)> oids-index;
      <get-oids> exp;
      mapconcat({tid:
        ?tid;
        <mapconcat(<bagof-ObjectId> Index(tid, <id>))> types-index
      }) => oids

  // Parameter list is stored for completion.
  get-oids: Function(_, _){a} -> [a]

  // FIXME: Should get OIDs that function/method can return
  get-oids: FunctionCall(_, _) -> []
  get-oids: MethodCall(_, _, _) -> []

  get-oids: TableCons(_){a} -> [a]

rules // Getters

  get-types =
    (get-oids <+ bagof-ObjectId) => oids;
    mapconcat(bagof-TypeOf);
    // Filter out "inferred" types iff we have actual types.
    try(filter(?_{}); is-not-empty);
    // Make unique. Same type may enter the list via different OIDs.
    nub;
    // Add fields to table type. (Fields from all OIDs are combined.)
    map(try(\Table() -> Table(<mapconcat(bagof-TableField)> oids)\))

rules // Pretty printing types

  pp-type: Null() -> "nil"
  pp-type: Boolean() -> "boolean"
  pp-type: Number() -> "number"
  pp-type: String() -> "string"

  pp-type: Table(fields) ->
    $[table { [<string-sort; separate-by(|", ")> fields] }]

  pp-type: Function(_) -> <pp-function; concat-strings> ("function ", <id>)

  // Returns list of strings
  pp-function: (name, Function(arg*)) -> [name, "(", arg'*, ")"]
    where
      arg'* := <map(?Name(<id>) + (VarArgs() -> "..."));
                separate-by(|", ")> arg*

  // Removes the first (self) argument, and invokes pp-function.
  pp-method: (name, Function([_ | arg*])) ->
    <pp-function> (name, Function(arg*))
