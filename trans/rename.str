/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module rename

imports
  include/Lua
  lib/editor-common.generated

strategies

  // Based on code snippets in `The Spoofax Language Workbench (DRAFT)'
  // by Lennart C. L. Kats and Eelco Visser.

  rename-top = rename-scope(rename-top')

  rename-top' = alltd(rename)

  rename-scope(s) = {|RenameId: s|}
  rename-scope = rename-scope(all(rename-top'))

rules

  // Variable declaration
  rename: d@Name(x) -> Name(y)
    where
      y := x{<new>};
      rules(
        VarDef   : y -> d
        RenameId : x -> y
      )

  // Variable use
  rename: Var(x) -> Var(y)
    where
      y := <RenameId> x;
      rules( VarUse : y -> y )

  // Scopes
  rename: x@Chunk(_) -> <rename-scope> x
  rename: x@ForLoop(_, _, _, _, _) -> <rename-scope> x
  rename: x@ForEachLoop(_, _, _) -> <rename-scope> x
  rename: x@Function(_, _) -> <rename-scope> x

  // Special handling for `repeat ... until exp' loops because
  // the scope of the body includes the loop condition exp.
  rename: RepeatLoop(Chunk(x), exp) -> RepeatLoop(Chunk(y), exp')
    where
      {|RenameId:
        y    := <rename-top'> x;
        exp' := <rename-top'> exp
      |}

  // Completion
  rename: COMPLETION(_) -> <id>
    where
      all-keys-RenameId => proposals;
      rules( ContentProposals := proposals )
