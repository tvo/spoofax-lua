/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module desugar

imports
  include/Lua
  lib/editor-common.generated

strategies

  desugar-top =
    bottomup(try(origin-track-forced(basic-desugar <+ desugar)))

  // convert [x, y, z] to Field(Field(Var(x), y), z)
  path-to-fields =
    ([y] -> Var(y)) <+ !Field(<init; path-to-fields>, <last>)

  // remove Lua [===[ ... ]===] brackets
  un-long-bracket =
    string-as-chars(
      ?['[' | <init>];         // outer brackets
      repeat(?['=' | <init>]); // equals signs
      ?['[' | <init>]          // inner brackets
    )

rules

  basic-desugar:
    Chunk(stat*, laststat) -> Chunk([stat'*, laststat])
    where
      // last desugaring rule might have generated a list in our list...
      stat'* := <flatten-list> stat*

  basic-desugar:
    Return(None()) -> Return([])

  basic-desugar:
    Return(Some(t)) -> Return(t)

  basic-desugar:
    ArgList(None()) -> []

  basic-desugar:
    ArgList(Some(t)) -> t

  basic-desugar:
    ArgTableCons(t) -> [t]

  basic-desugar:
    ArgString(t) -> [String(<un-double-quote> t)]

  basic-desugar:
    ArgRawString(t) -> [String(<un-long-bracket> t)]

  basic-desugar:
    String(t) -> String(<un-double-quote> t)

  basic-desugar:
    RawString(t) -> String(<un-long-bracket> t)

  basic-desugar:
    ParList(t*) -> t*

  basic-desugar:
    VarParList(t*) -> [t*, VarArgs()]

  basic-desugar:
    TableCons(None()) -> TableCons([])

  basic-desugar:
    TableCons(Some(FieldList(t*, _))) -> TableCons(<remove-all(is-int)> t*)

  // See Recovery.sdf
  basic-desugar:
    MethodCall(exp, name) -> MethodCall(exp, name, [])

  // Always include optional step size with `for' loops
  desugar:
    ForLoop(a, b, c, d) -> ForLoop(a, b, c, Number("1"), d)

  // `x:z()' is sugar for `x.z(x)', but this conflicts with completion,
  // because we need to know whether a particular call site is a normal
  // function call or a method call later on...

  // `function x:z()...end' is sugar for `function x.z(self)...end'
  desugar:
    FunctionDecl(MethodName(path, name), Function(args, body)) ->
      Assignment([path'], [Function(args', body)])
    where
      path' := <path-to-fields> <conc> (path, [name]);
      args' := <conc> ([Name("self")], args)

  // `function x.y.z()...end' is sugar for `x.y.z = function()...end'
  desugar:
    FunctionDecl(FunctionName(path), fun) ->
      Assignment([path'], [fun])
    where
      path' := <path-to-fields> path

  // `local function x()...end' is sugar for `local x; x = function()...end'
  desugar:
    LocalFunctionDecl(name, fun) ->
      [
        LocalVariableDecl([Name(name)]),
        Assignment([Var(name)], [fun])
      ]
