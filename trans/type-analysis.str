/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module type-analysis

imports
  include/Lua
  lib/editor-common.generated
  lua // FIXME: get rid of circular import

signature
  constructors
    Boolean  : Boolean
    Number   : Number
    String   : String
    Table    : String -> Table
    Function : String * List(String) -> Function
    Minus    : Exp * Exp -> Exp
    Minus    : Exp -> Exp

strategies

/*
ObjectId dynamic rule maps
- AST elements to their ObjectId
- Field(ObjectId, String) to its ObjectId
- Index(ObjectId, String) to its ObjectId

Goal of this type analysis is to calculate for each renamed variable the union
of all possible types this variable might have.
*/

  test-type-analysis:
    (selected, _, _, _, _) -> result
    where
      !selected;
      try(?[<id>]);
      try(?Name(<id>));
      try(?Var(<id>));
      try(\MethodName([table],field) -> Field(<ObjectId> table, field)\);
      bagof-ObjectId;
      // try(filter(not(?_{"default"})); is-not-empty);
      map(try(
        \Table(_) -> Table(<bagof-TableField>)\
      + \Function(fid, name*) -> Function(fid, <map(?Name(<strip-annos>))> name*)\
      )) => result

  type-analysis-top =
    with(
      assign-oid-top;
      alltd(assign-oid-complete)
      // DEBUG
      ;<debug> "=== ObjectId ===";
      all-keys-ObjectId;
      list-loop(<debug(!"ObjectId: ")> (<id>, <bagof-ObjectId>));
      <debug> "=== TableField ===";
      all-keys-TableField;
      list-loop(<debug(!"TableField: ")> (<id>, <bagof-TableField>))
      // END DEBUG
    )

  is-empty = ?[]
  is-not-empty = ?[_|_]

rules // Helpers

  // Assign all OIDs in current term (list) to the key T.
  put-oids(|t) =
    where( present-oids := <bagof-ObjectId> t );
    list-loop({oid: ?oid;
      (  <one(?oid)> present-oids
      <+ rules( ObjectId :+ t -> oid )  )
    })

  // Assign all OIDs of RHS to field NAME of all table OIDs in LHS.
  put-field(|exp-lhs, name, oids-rhs) =
    <get-oids> exp-lhs;
    list-loop(try({tid:
      ?tid@Table(_); // Only tables.
      <put-oids(|Field(tid, name))> oids-rhs;
      rules( TableField :+ tid -> name )
    }))

  put-index(|exp-lhs, exp-index, oids-rhs) =
    oids-index := <get-oids> exp-index;
    <get-oids> exp-lhs;
    list-loop(try({tid:
      ?tid@Table(_);
      !oids-index;
      list-loop({oid-index:
        ?oid-index;
        <put-oids(|Index(tid, oid-index))> oids-rhs
      })
    }))

rules // Generic

  assign-oid-top = alltd(assign-oid)

  assign-oid: Var(name) -> <id>
    with
      if <bagof-ObjectId; is-empty> name then
        // Yet unknown variable is assumed to be a table.
        oid := Table(<new>){"default"};
        rules( ObjectId :+ name -> oid )
      end

  assign-oid: Field(exp-lhs, name) -> <id>
    where
      <is-string> name // Exclude COMPLETION(_) node
    with
      <assign-oid-top> exp-lhs;
      // Yet unknown field is assumed to be a table.
      put-field(|exp-lhs, name, [Table(<new>){"default"}])

  assign-oid: MethodCall(exp-lhs, name, arg*) -> <id>
    where
      <is-string> name // Exclude COMPLETION(_) node
    where
      <assign-oid-top> exp-lhs;
      // Yet unknown field is assumed to be a function.
      put-field(|exp-lhs, name, [Function(<new>, [Name("self")]){"default"}])

  assign-oid: Index(exp-lhs, exp-index) -> <id>
    with
      <assign-oid-top> exp-lhs;
      <assign-oid-top> exp-index;
      put-index(|exp-lhs, exp-index, [Table(<new>){"default"}])

rules // Assignments

  assign-oid: LocalVariableDecl(name*, exp*) -> <id>
    with
      <assign-oid-top> exp*;
      <zipPad(assignment-assign-oid, !None())> (name*, exp*)

  assign-oid: Assignment(var*, exp*) -> <id>
    with
      // assign-oid-top for var* is called selectively in assignment-assign-oid
      <assign-oid-top> exp*;
      <zipPad(assignment-assign-oid, !None())> (var*, exp*)

  // Assignment to a new variable
  assignment-assign-oid:
    (Name(name), exp-rhs) -> <id>
    where
      <get-oids; put-oids(|name)> exp-rhs

  // Assignment to an existing variable
  assignment-assign-oid:
    (Var(name), exp-rhs) -> <id>
    where
      <get-oids; put-oids(|name)> exp-rhs

  // Assignment to a field, e.g. `x.y = 1'
  assignment-assign-oid:
    (Field(exp-lhs, name), exp-rhs) -> <id>
    where
      <assign-oid-top> exp-lhs;
      // Set all possible OIDs of the RHS to
      // the NAME field of all tables on the LHS.
      put-field(|exp-lhs, name, <get-oids> exp-rhs)

  // Assignment to an index, e.g. `x[1] = 2'
  assignment-assign-oid:
    (Index(exp-lhs, exp-index), exp-rhs) -> <id>
    where
      <assign-oid-top> exp-lhs;
      <assign-oid-top> exp-index;
      put-index(|exp-lhs, exp-index, <get-oids> exp-rhs)

  // Error case: more expressions than variables given in assignment.
  assignment-assign-oid:
    (None(), exp-rhs) -> <id>

rules // Table Constructors

  assign-oid: TableCons(field*){a} -> <id>
    with
      <list-loop(put-field(|Table(a)))> field*

  put-field(|tid): ArrayField(exp) -> <id>
    where
      <get-oids> exp;
      // When table TID is indexed using a number, it might return OIDs.
      // NOTE: all indices are in the same equivalence class (number).
      put-oids(|Index(tid, Number()))

  put-field(|tid): KeyValueField(name, exp) -> <id>
    where
      <get-oids> exp;
      // When table TID is indexed using a string, it might return OIDs.
      put-oids(|Index(tid, String()));
      // When field NAME in table TID is accessed, it might return OIDs.
      put-oids(|Field(tid, name));
      // Table TID has field NAME, which stores OID.
      rules( TableField :+ tid -> name )

  put-field(|tid): CalculatedField(_, _) -> <id>

rules // Completion

  assign-oid-complete: Field(exp, COMPLETION(_)) -> []
    where
      <get-oids> exp;
      mapconcat({
        ?oid;
        bagof-TableField;
        map(try(<pp-function> (<id>, <ObjectId> Field(oid, <id>))))
      }) => proposals;
      rules( ContentProposals := proposals )

  assign-oid-complete: MethodCall(exp, COMPLETION(_), _) -> []
    where
      <get-oids> exp;
      mapconcat({
        ?oid;
        bagof-TableField;
        map(try(<pp-method> (<id>, <ObjectId> Field(oid, <id>))))
      }) => proposals;
      rules( ContentProposals := proposals )

rules // Getters

  // Error case: more variables than expressions given in assignment.
  get-oids: None() -> []

  get-oids: Null()    -> [Null()]
  get-oids: False()   -> [Boolean()]
  get-oids: True()    -> [Boolean()]
  get-oids: Number(_) -> [Number()]
  get-oids: String(_) -> [String()]

  // FIXME: Be smarter here...
  get-oids: VarArgs() -> []

  get-oids: Var(name) -> <bagof-ObjectId> name

  // Used for hover help; not used in the actual type analysis.
  get-oids: Name(name) -> <bagof-ObjectId> name

  // Binary operators with Number() result.
  // FIXME: ignoring operator overloading...
  get-oids: Plus  (_, _) -> [Number()]
  get-oids: Minus (_, _) -> [Number()]
  get-oids: Times (_, _) -> [Number()]
  get-oids: Divide(_, _) -> [Number()]
  get-oids: Power (_, _) -> [Number()]
  get-oids: Modulo(_, _) -> [Number()]

  // Binary operators with String() result.
  get-oids: Concat(_, _) -> [String()]

  // Binary operators with Boolean() result.
  get-oids: LowerThan  (_, _) -> [Boolean()]
  get-oids: GreaterThan(_, _) -> [Boolean()]
  get-oids: LowerThanOrEqual  (_, _) -> [Boolean()]
  get-oids: GreaterThanOrEqual(_, _) -> [Boolean()]
  get-oids: Equal   (_, _) -> [Boolean()]
  get-oids: NotEqual(_, _) -> [Boolean()]

  // And and Or return one of their arguments.
  get-oids: And(x, y) -> <conc> (<get-oids> x, <get-oids> y)
  get-oids: Or (x, y) -> <conc> (<get-oids> x, <get-oids> y)

  // Unary operators.
  get-oids: Minus(_) -> [Number()]
  get-oids: Not(_) -> [Boolean()]
  get-oids: Length(_) -> [Number()]

  get-oids: Field(exp, name) -> oids
    where
      <get-oids> exp;
      filter(?Table(_)); // Only tables.
      mapconcat(<bagof-ObjectId> Field(<id>, name)) => oids

  get-oids: Index(exp, exp-index) -> oids
    where
      oids-index := <get-oids> exp-index;
      <get-oids> exp;
      filter(?Table(_)); // Only tables.
      mapconcat({tid:
        ?tid;
        <mapconcat(<bagof-ObjectId> Index(tid, <id>))> oids-index
      }) => oids

  // Parameter list is stored for completion.
  get-oids: Function(names, _) -> [Function(<new>, names)]

  // FIXME: Should get OIDs that function/method can return
  get-oids: FunctionCall(_, _) -> []
  get-oids: MethodCall(_, _, _) -> []

  get-oids: TableCons(_){a} -> [Table(a)]
