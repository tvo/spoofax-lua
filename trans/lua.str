/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module lua

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Lua
  lib/editor-common.generated
  check
  desugar
  globals
  rename
  rename-loop

signature
  constructors
    amb : Term -> Term

rules // Main editor interface (defined by editor/Lua-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> result
    with
      editor-init;
      ast' := <analyze> ast;
      if !ast' => File(_, _) then
        errors   := <collect-all(check-error, conc)> ast';
        warnings := <collect-all(check-warning, conc)> ast';
        notes    := <collect-all(check-note, conc)> ast';
        result   := (ast', errors, warnings, notes)
      else
        // For syntax tests
        result   := (ast', [], [], [])
      end

  analyze =
    desugar-top;
    rename-top;
    rename-loop-top;
    globals-top

  // Prints the AST of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  // Prints the decorated AST of a selection.
  // Only diff with generate-aterm is the lack of (source) annotation in Lua-Builders.esv
  generate-decorated-ast = generate-aterm

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      target := <decl-of> node

  decl-of:
    Var(x) -> <VarDef <+ GlobalVar> x

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      <debug(!"Complete: ")> (node, position)
    where
      if !node => Var(COMPLETION(prefix)) then
        {|Proposals:
          <desugar-top; rename-top> ast;
          proposals := <conc> (<Proposals>, <all-keys-GlobalVar>)
        |}
      end

  parse-test:
    (selected, position, ast, path, project-path) -> None()
    with
      <readdir; string-sort> "test/parse";
      list-loop({filename: ?filename;
        profile(!filename,
          !$[test/parse/[filename]];
          (parse-lua-file <+ debug(!"Fails parsing: "))
        )
      })
