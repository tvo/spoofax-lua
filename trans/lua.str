module lua

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Lua
  lib/editor-common.generated
  check
  desugar
  globals
  rename

rules // Main editor interface (defined by editor/Lua-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      ast'     := <analyze>;
      errors   := <collect-all(check-error, conc)> ast';
      warnings := <collect-all(check-warning, conc)> ast';
      notes    := <collect-all(check-note, conc)> ast'

  // Prints the AST of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  // Prints the decorated AST of a selection.
  // Only diff with generate-aterm is the lack of (source) annotation in Lua-Builders.esv
  generate-decorated-ast = generate-aterm

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      target := <decl-of> node

  decl-of:
    Var(x) -> <VarDef <+ GlobalVar> x

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      <debug(!"Complete: ")> node;
      if !node => Var(COMPLETION(prefix)) then
        proposals := <all-keys-VarDef>
      end
