/*
 * Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
 * Copyright (C) 2011  Tobi Vollebregt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module lua

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Lua
  lib/editor-common.generated
  check
  desugar
  globals
  rename
  rename-loop
  type-analysis

signature
  constructors
    amb : Term -> Term

rules // Main editor interface (defined by editor/Lua-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> result
    with
      editor-init;
      ast' := <analyze> ast;
      if !ast' => File(_, _) then
        errors   := <collect-all(check-error, conc)> ast';
        warnings := <collect-all(check-warning, conc)> ast';
        notes    := <collect-all(check-note, conc)> ast';
        result   := (ast', errors, warnings, notes)
      else
        // For syntax tests
        result   := (ast', [], [], [])
      end

  analyze =
    desugar-top;
    rename-top;
    rename-loop-top;
    globals-top;
    type-analysis-top

  // Prints the AST of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  // Prints the decorated AST of a selection.
  // Only diff with generate-aterm is the lack of (source) annotation in Lua-Builders.esv
  generate-decorated-ast = generate-aterm

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      target := <decl-of> node

  decl-of:
    Var(x) -> <VarDef <+ GlobalVarDef> x

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      $[<b>Possible types:</b><br/><ul>[list]</ul>]
    where
      list := <get-pretty-types> target
    <+
      parent-of-target := <parent-at-position(|position)> ast;
      list := <get-pretty-types> parent-of-target

  get-pretty-types = get-oids; filter(pp-type; !$[<li> [<id>]</li>]); nub

  pp-type: Null() -> "nil"
  pp-type: Boolean() -> "boolean"
  pp-type: Number() -> "number"
  pp-type: String() -> "string"

  pp-type: Table(_){} -> "table"
    where not(TableField)

  pp-type: Table(_) ->
    $[table { [<bagof-TableField; string-sort; separate-by(|", ")>] }]
    where TableField

  pp-type: Function(_, _) -> <pp-function; concat-strings> ("function ", <id>)

  // Returns list of strings
  pp-function: (name, Function(_, arg*)) -> [name, "(", arg'*, ")"]
    where
      arg'* := <map(?Name(<id>) + (VarArgs() -> "..."));
                separate-by(|", ")> arg*

  // Removes the first (self) argument, and invokes pp-function.
  pp-method: (name, Function(oid, [_ | arg*])) ->
    <pp-function> (name, Function(oid, arg*))

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
    //   proposals := <ContentProposals>
    // <+
      <analyze> ast;
      proposals := <propose-completions> node;
      rules( ContentProposals := proposals )

  propose-completions:
    Var(COMPLETION(_)) -> result
    where
      <conc> (<ContentProposals>, <all-keys-GlobalVarDef>);
      map(try(<pp-function> (<id>, <ObjectId>))) => result

  propose-completions:
    Field(_, COMPLETION(_)) -> <ContentProposals>

  propose-completions:
    MethodCall(_, COMPLETION(_), _) -> <ContentProposals>

  // Recovery variant
  propose-completions:
    MethodCall(_, COMPLETION(_)) -> <ContentProposals>

  parse-test:
    (selected, position, ast, path, project-path) -> None()
    with
      <readdir; string-sort> "test/parse";
      list-loop({filename: ?filename;
        profile(!filename,
          !$[test/parse/[filename]];
          (parse-lua-file <+ debug(!"Fails parsing: "))
        )
      })
