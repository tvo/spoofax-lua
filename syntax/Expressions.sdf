%% Spoofax-Lua: a Lua Eclipse plugin based on Spoofax
%% Copyright (C) 2011  Tobi Vollebregt
%%
%% This program is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program.  If not, see <http://www.gnu.org/licenses/>.

module Expressions
imports
  Common

exports
  context-free syntax

%% explist ::= {exp `,´} exp
    {Exp ","}+ -> ExpList {ast("<1>")}

%% exp ::= nil | false | true | Number | String | `...´ |
%%         prefixexp | tableconstructor
    "nil"         -> Exp {cons("LuaNil")}
    "false"       -> Exp {cons("False")}
    "true"        -> Exp {cons("True")}
    NUMBER        -> Exp {cons("Number")}
    STRING        -> Exp {cons("String")}
    RAWSTRING     -> Exp {cons("RawString")}
    "..."         -> Exp {cons("VarArgs")}
    PrefixExp T   -> Exp {ast("<1>")}
                  -> T   {cons("Bogus")}
    TableCons     -> Exp

%% exp ::= exp binop exp
%% binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ |
%%           `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | and | or
    Exp "+"   Exp -> Exp {left, cons("Plus")}
    Exp MINUS Exp -> Exp {left, ast("Minus(<1>, <3>)")}
    Exp "*"   Exp -> Exp {left, cons("Times")}
    Exp "/"   Exp -> Exp {left, cons("Divide")}
    Exp "^"   Exp -> Exp {right, cons("Power")}
    Exp "%"   Exp -> Exp {left, cons("Modulo")}
    Exp ".."  Exp -> Exp {right, cons("Concat")}
    Exp "<"   Exp -> Exp {left, cons("LowerThan")}
    Exp "<="  Exp -> Exp {left, cons("LowerThanOrEqual")}
    Exp ">"   Exp -> Exp {left, cons("GreaterThan")}
    Exp ">="  Exp -> Exp {left, cons("GreaterThanOrEqual")}
    Exp "=="  Exp -> Exp {left, cons("Equal")}
    Exp "~="  Exp -> Exp {left, cons("NotEqual")}
    Exp "and" Exp -> Exp {left, cons("And")}
    Exp "or"  Exp -> Exp {left, cons("Or")}

%% exp ::= unop exp
%% unop ::= `-´ | not | `#´
    MINUS Exp -> Exp {ast("Minus(<2>)")}
    "not" Exp -> Exp {cons("Not")}
    "#"   Exp -> Exp {cons("Length")}

%% prefixexp ::= var | functioncall | `(´ exp `)´
    Var -> PrefixExp
    FunctionCall -> PrefixExp
    "(" Exp ")" -> PrefixExp {bracket}

%% var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name
%% NOTE: Var is any expression that can be the LHS in assignment
%% NOTE: PrefixExp is any expression that can be the LHS in array indexing,
%%       field access, function call, ...
    ID                    -> Var {cons("Var")}
    PrefixExp "[" Exp "]" -> Var {cons("Index")}
    PrefixExp "." ID      -> Var {cons("Field")}

%% functioncall ::=  prefixexp args | prefixexp `:´ Name args
    PrefixExp Args        -> FunctionCall {cons("FunctionCall")}
    PrefixExp ":" ID Args -> FunctionCall {cons("MethodCall")}

%% args ::=  `(´ [explist] `)´ | tableconstructor | String
    "(" ExpList? ")" -> Args {cons("ArgList")}
     TableCons       -> Args {cons("ArgTableCons")}
     STRING          -> Args {cons("ArgString")}
     RAWSTRING       -> Args {cons("ArgRawString")}

%% tableconstructor ::= `{´ [fieldlist] `}´
    "{" FieldList? "}" -> TableCons {cons("TableCons")}

%% fieldlist ::= field {fieldsep field} [fieldsep]
%% fieldsep ::= `,´ | `;´
    {Field [\,\;]}+ [\,\;]? -> FieldList {cons("FieldList")}

%% field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp
    "[" Exp "]" "=" Exp -> Field {cons("CalculatedField")}
    ID "=" Exp          -> Field {cons("KeyValueField")}
    Exp                 -> Field {cons("ArrayField")}

  context-free priorities

%% http://www.lua.org/manual/5.1/manual.html#2.5.6
    {right: "not"     Exp -> Exp
            "#"       Exp -> Exp
            MINUS     Exp -> Exp
            Exp "^"   Exp -> Exp} >
    {left:  Exp "*"   Exp -> Exp
            Exp "/"   Exp -> Exp
            Exp "%"   Exp -> Exp} >
    {left:  Exp "+"   Exp -> Exp
            Exp MINUS Exp -> Exp} >
    {right: Exp ".."  Exp -> Exp} >
    {left:  Exp "<"   Exp -> Exp
            Exp ">"   Exp -> Exp
            Exp "<="  Exp -> Exp
            Exp ">="  Exp -> Exp
            Exp "~="  Exp -> Exp
            Exp "=="  Exp -> Exp} >
    {left:  Exp "and" Exp -> Exp} >
    {left:  Exp "or"  Exp -> Exp}

  context-free restrictions

    T -/- [\(]
